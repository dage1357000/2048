import sys
import os
import random
import itertools


seqs = [1, 2, 3, 4]
def trim(seqs, direction=0):
    return ([0, 0, 0, 0]+[n for n in seqs if n])[-4:] if direction else ([n for n in seqs if n] +[0, 0, 0, 0])[:4]

def sum_seqs(seqs, direction=0):
    seqs = trim(seqs, direction=direction)
    if direction == 1:
        seqs = seqs[::-1]
    if seqs[0] and seqs[0] == seqs[1]:
        seqs[0], seqs[1] = seqs[0]*2, 0
    if seqs[1] and seqs[1] == seqs[2]:
        seqs[1], seqs[2] = seqs[1]*2, 0
    if seqs[2] and seqs[2] == seqs[3]:
        seqs[2], seqs[3] = seqs[2]*2, seqs[3]
    if direction == 1:
        seqs = seqs[::-1]
    return trim(seqs, direction=direction)
def up(grid):
    for col in [0, 1, 2, 3]:
        for _idx, n in enumerate(sum_seqs([row[col] for row in grid])):
            grid[_idx][col] = n
    return grid

def down(grid):
    for col in [0, 1, 2, 3]:
        for _idx, n in enumerate(sum_seqs([row[col] for row in grid], direction=1)):
            grid[_idx][col] = n
    return grid

def left(grid):
    return [sum_seqs(row) for row in grid]

def right(grid):
    return [sum_seqs(row, direction=1) for row in grid]
class Game:
    grid = []
    controls = ['w', 'a', 's', 'd']
    def rnd_field(self, control=0):
        new_field ={'a':([3], [0, 1, 2, 3]), 's':([0, 1, 2, 3], [3]), 'd': ([0], [0, 1, 2, 3]), 'w':([0, 1, 2, 3], [0])}
        number = random.choice([4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, ])
        if control in self.controls:
            x, y = random.choice([(x, y) for x, y in itertools.product(new_field[control][0], new_field[control][1]) if self.grid[x][y] == 0])
        else:
            x, y = random.choice([(x, y) for x, y in itertools.product([0, 1, 2, 3], [0, 1, 2, 3]) if self.grid[x][y] == 0])
        self.grid[x][y] = number
    def print_screen(self):   #向用户输出
        os.system('cls')
        print('-' * 21)
        for row in self.grid:
            print('|{}|'.format('|'.join([str(col).center(4) for col in row])))
            print('-' * 21)
    def logic(self, control):
        grid = {'w': up, 'a': left, 's': down, 'd': right}[control]([[c for c in r] for r in self.grid])
        if grid != self.grid:
            del self.grid[:]
            self.grid.extend(grid)
            if [n for n in itertools.chain(*grid) if n >= 16]:
                return 1
            self.rnd_field(control=control)
        else:
            if not [1 for g in [f(grid) for f in [up, down, left, right]] if g !=self.grid]:
                return -1
        return 0   #1--'You Win!'   -1--'You'

    def main_loop(self):
        self.grid = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
        self.rnd_field()
        self.rnd_field()
        while True:
            self.print_screen()
            control = input('input w/a/s/d:')
            if control in self.controls:
                self.logic(control)
                status = self.logic(control)
                if status:
                    print('You Win!')
                    self.print_screen()
                    if input('Start another game?[Y/N]').lower() == 'y':
                        break
                    else:
                        sys.exit(0)
        self.main_loop()

if __name__ == '__main__':
    Game().main_loop()
